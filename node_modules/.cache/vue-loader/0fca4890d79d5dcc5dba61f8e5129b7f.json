{"remainingRequest":"C:\\Users\\arvind kumar\\Documents\\GitHub\\xharuke.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\arvind kumar\\Documents\\GitHub\\xharuke.github.io\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\arvind kumar\\Documents\\GitHub\\xharuke.github.io\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\arvind kumar\\Documents\\GitHub\\xharuke.github.io\\src\\views\\LandingPage.vue?vue&type=template&id=1c0d9c08&scoped=true&","dependencies":[{"path":"C:\\Users\\arvind kumar\\Documents\\GitHub\\xharuke.github.io\\src\\views\\LandingPage.vue","mtime":1647515729992},{"path":"C:\\Users\\arvind kumar\\Documents\\GitHub\\xharuke.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647515702606},{"path":"C:\\Users\\arvind kumar\\Documents\\GitHub\\xharuke.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1647515725888},{"path":"C:\\Users\\arvind kumar\\Documents\\GitHub\\xharuke.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647515702606},{"path":"C:\\Users\\arvind kumar\\Documents\\GitHub\\xharuke.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1647515725885}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}