{"remainingRequest":"C:\\Users\\arvind kumar\\Documents\\GitHub\\haruke\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\arvind kumar\\Documents\\GitHub\\haruke\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\arvind kumar\\Documents\\GitHub\\haruke\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\arvind kumar\\Documents\\GitHub\\haruke\\src\\views\\LandingPage.vue?vue&type=template&id=1c0d9c08&scoped=true&","dependencies":[{"path":"C:\\Users\\arvind kumar\\Documents\\GitHub\\haruke\\src\\views\\LandingPage.vue","mtime":1646825663297},{"path":"C:\\Users\\arvind kumar\\Documents\\GitHub\\haruke\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646821409247},{"path":"C:\\Users\\arvind kumar\\Documents\\GitHub\\haruke\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1646821418136},{"path":"C:\\Users\\arvind kumar\\Documents\\GitHub\\haruke\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646821409247},{"path":"C:\\Users\\arvind kumar\\Documents\\GitHub\\haruke\\node_modules\\vue-loader\\lib\\index.js","mtime":1646821415349}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}